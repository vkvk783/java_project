# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

# Agent VM image name
pool:
  vmImage: ubuntu-latest

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '94f5cfc1-06a4-4858-93fa-54b1083eab1c'
  # Defining resource Group variable
  rg: 'cicd-rg'
  # Define the desired Java runtime stack
  javaRuntime: 'JAVA|8-jre8'
  # Define the name for the App Service plan
  appServicePlanName: 'myapp-service-plan'
  # Define the name for the Web App
  webAppName: 'cicd-dev-app'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Buildjob
    displayName: Build
    pool:
      vmImage: ubuntu-latest

    # Maven Build and Test
    steps:
    - task: Maven@4
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: 'pom.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false

    # Publish JUnit Test Results
    - task: PublishTestResults@2
      displayName: 'Publish JUnit Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mergeTestResults: true
        testRunTitle: 'JUnit Test Results'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage Results'
      inputs:
        summaryFileLocation: '**/target/site/jacoco/jacoco.xml'
        failIfCoverageEmpty: true

    # Step 4: SonarCloud Analysis Preparation
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarQube: 'SonarQube Cloud'
        organization: 'vkvk783'
        scannerMode: 'cli'
        configMode: 'manual'
        cliProjectKey: 'vkvk783_java_project'
        cliProjectName: 'java_project'
        cliSources: 'webapp/src/main/webapp/'
        extraProperties: |
          sonar.junit.reportPaths=target/surefire-reports
          sonar.jacoco.reportPaths=target/site/jacoco/jacoco.xml

    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud Analysis'
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'

    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - deployment: Deployjob
    displayName: 'Create Server and Deploy'
    pool:
      vmImage: ubuntu-latest
    environment: Dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Create Azure Resources'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Check if resource group exists, create if not
                if ! az group exists --name "$(rg)" ; then
                  echo "Creating resource group $(rg) in eastus2"
                  az group create --location eastus2 --name "$(rg)"
                fi

                # Check if app service plan exists, create if not (Linux)
                if ! az appservice plan show --name "$(appServicePlanName)" --resource-group "$(rg)" &> /dev/null ; then
                  echo "Creating App Service Plan $(appServicePlanName) (Linux) in $(rg)"
                  az appservice plan create -g "$(rg)" -n "$(appServicePlanName)" --is-linux
                fi

                # Check if web app exists, create if not (Java SE runtime)
                if ! az webapp show --name "$(webAppName)" --resource-group "$(rg)" &> /dev/null ; then
                  echo "Creating Web App $(webAppName) in $(rg) with runtime $(javaRuntime)"
                  az webapp create -g "$(rg)" -p "$(appServicePlanName)" -n "$(webAppName)" --runtime "$(javaRuntime)"
                fi

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(webAppName)'
              package: '$(Pipeline.Workspace)/drop/**/*.war'
              runtimeStack: '$(javaRuntime)'
